name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY_API: myapp-api
  ECR_REPOSITORY_NGINX: myapp-nginx
  ECS_SERVICE: myapp-service-backend
  ECS_CLUSTER: myapp-cluster
  ECS_TASK_DEFINITION: task-definition.json
  CONTAINER_NAME_API: myapp-container-api
  CONTAINER_NAME_NGINX: myapp-container-nginx

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
          platforms: linux/arm64
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and push api image to Amazon ECR
      id: build-api-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        platforms: |
          linux/amd64,linux/arm64
        tags: $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Set api image ID as output
      run: echo "::set-output name=image-api::$ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG"

    # - name: Build, tag, and push image to Amazon ECR
    #   id: build-image
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     # RailsのDockerイメージをビルドしてECRにプッシュする
    #     docker buildx create --use
    #     docker buildx build --push -t $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG --platform linux/amd64,linux/arm64 .
    #     echo "::set-output name=image-api::$ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG"

    #     # NginxのDockerイメージをビルドしてECRにプッシュ
    #     docker buildx create --use
    #     docker buildx build --push -t $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG --platform linux/amd64,linux/arm64 -f nginx/Dockerfile ./nginx
    #     echo "::set-output name=image-nginx::$ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG"

    - name: Fill in the new api image ID in the Amazon ECS task definition
      id: task-def-api
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME_API }}
        image: ${{ steps.build-image.outputs.image-api }}

    - name: Fill in the new nginx image ID in the Amazon ECS task definition
      id: task-def-nginx
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-api.outputs.task-definition }}
        container-name: ${{ env.CONTAINER_NAME_NGINX }}
        image: ${{ steps.build-image.outputs.image-nginx }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-nginx.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
